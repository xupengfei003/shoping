<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="so.sao.shop.supplier.dao.PurchaseDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="so.sao.shop.supplier.domain.Purchase">
        <id column="order_id" property="orderId"/>
        <result column="store_id" property="storeId"/>
        <result column="store_name" property="storeName"></result>
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="order_price" property="orderPrice"/>
        <result column="order_settleme_price" property="orderSettlemePrice"/>
        <result column="order_receiver_name" property="orderReceiverName"/>
        <result column="order_receiver_mobile" property="orderReceiverMobile"/>
        <result column="order_address" property="orderAddress"/>
        <result column="order_ship_method" property="orderShipMethod"/>
        <result column="order_payment_num" property="orderPaymentNum"/>
        <result column="order_create_time" property="orderCreateTime"/>
        <result column="order_payment_method" property="orderPaymentMethod"/>
        <result column="order_payment_time" property="orderPaymentTime"/>
        <result column="order_refuse_reason" property="orderRefuseReason"/>
        <result column="order_refuse_time" property="orderRefuseTime"/>
        <result column="order_cancel_reason" property="orderCancelReason"/>
        <result column="order_shipment_number" property="orderShipmentNumber"/>
        <result column="order_invoice" property="orderInvoice"/>
        <result column="order_status" property="orderStatus"/>
        <result column="account_status" property="accountStatus"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="order_refuse_imgA" property="orderRefuseImgA"/>
        <result column="order_refuse_imgB" property="orderRefuseImgB"/>
        <result column="order_refuse_imgC" property="orderRefuseImgC"/>
        <result column="order_receive_time" property="orderReceiveTime"/>
        <result column="pay_status" property="payStatus"/>
    </resultMap>
    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
    order_id AS orderId,
	store_id AS storeId,
	user_id AS userId,
	order_price AS orderPrice,
	order_settleme_price AS orderSettlemePrice,
	order_receiver_name AS orderReceiverName,
	order_receiver_mobile AS orderReceiverMobile,
	order_address AS orderAddress,
	order_ship_method AS orderShipMethod,
	order_payment_num AS orderPaymentNum,
	order_create_time AS orderCreateTime,
	order_payment_method AS orderPaymentMethod,
	order_payment_time AS orderPaymentTime,
	order_refuse_reason AS orderRefuseReason,
	order_refuse_time AS orderRefuseTime,
	order_cancel_reason AS orderCancelReason,
	order_shipment_number AS orderShipmentNumber,
	order_invoice AS orderInvoice,
	order_status AS orderStatus,
	drawback_time AS drawbackTime,
	distributor_name AS distributorName,
	distributor_mobile AS distributorMobile,
	logistics_company AS logisticsCompany,
	pay_status AS payStatus
  </sql>
    <!-- 根据ID查询订单信息 -->
    <select id="findById" parameterType="java.lang.String" resultType="so.sao.shop.supplier.domain.Purchase">
        select
        <include refid="Base_Column_List"/>
        from purchase
        where order_id = #{orderId,jdbcType=VARCHAR}
    </select>
    <!-- 批量查询订单列表 -->
    <select id="getOrderListByIds" resultMap="BaseResultMap">
        SELECT
        order_id,
        order_receiver_name,
        order_receiver_mobile,
        order_status,
        order_price,
        order_create_time,
        order_payment_method,
        order_payment_num
        FROM
        purchase
        <where>
            order_status != -1

            <!--<if test="@so.sao.shop.supplier.util.Ognl@isEmpty(purchaseSelectInput.orderStatus)">
                AND (order_status != 7 || pay_status != 0)
            </if>
            <if test="purchaseSelectInput.orderStatus == 7">
                AND pay_status != 0
            </if>
            <if test="purchaseSelectInput.orderStatus!=null">
                AND order_status = TRIM(#{purchaseSelectInput.orderStatus})
            </if>-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderStatus)">
                AND order_status = TRIM(#{purchaseSelectInput.orderStatus})
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiverName) and
            @so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiverMobile) and purchaseSelectInput.orderReceiverName == purchaseSelectInput.orderReceiverMobile">
                AND (order_receiver_name LIKE "${purchaseSelectInput.orderReceiverName}%"
                OR order_receiver_mobile LIKE "${purchaseSelectInput.orderReceiverMobile}%")
            </if>
            <if test="purchaseSelectInput.orderReceiverName != purchaseSelectInput.orderReceiverMobile">
                <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiverName)">
                    AND order_receiver_name LIKE "${purchaseSelectInput.orderReceiverName}%"
                </if>
                <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiverMobile)">
                    AND order_receiver_mobile LIKE "${purchaseSelectInput.orderReceiverMobile}%"
                </if>
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderId)">
                AND order_id LIKE "${purchaseSelectInput.orderId}%"
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.beginDate)">
                AND order_create_time >= TRIM(STR_TO_DATE(#{purchaseSelectInput.beginDate},'%Y-%m-%d'))
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.endDate)">
                AND order_create_time &lt; TRIM(DATE_ADD(STR_TO_DATE(#{purchaseSelectInput.endDate},'%Y-%m-%d'),INTERVAL
                1 DAY))
            </if>

            <if test="purchaseSelectInput.beginMoney!=null">
                AND order_price >= TRIM(#{purchaseSelectInput.beginMoney})
            </if>
            <if test="purchaseSelectInput.endMoney != null">
                <![CDATA[AND order_price <= TRIM(#{purchaseSelectInput.endMoney})]]>
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderPaymentBeginTime)">
                AND order_payment_time >= TRIM(STR_TO_DATE(#{purchaseSelectInput.orderPaymentBeginTime},'%Y-%m-%d'))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderPaymentEndTime)">
                AND order_payment_time &lt;
                TRIM(DATE_ADD(STR_TO_DATE(#{purchaseSelectInput.orderPaymentEndTime},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiveBeginTime)">
                AND order_receive_time >= TRIM(STR_TO_DATE(#{purchaseSelectInput.orderReceiveBeginTime},'%Y-%m-%d'))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderReceiveEndTime)">
                AND order_receive_time &lt;
                TRIM(DATE_ADD(STR_TO_DATE(#{purchaseSelectInput.orderReceiveEndTime},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>

            <if test="purchaseSelectInput.orderPaymentMethod!=null">
                AND order_payment_method = TRIM(#{purchaseSelectInput.orderPaymentMethod})
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(purchaseSelectInput.orderPaymentNum)">
                AND order_payment_num LIKE "${purchaseSelectInput.orderPaymentNum}%"
            </if>

            <if test="purchaseSelectInput.userId!=null">
                AND user_id LIKE "${purchaseSelectInput.userId}%"
            </if>
            AND store_id = #{accountId}
        </where>

        ORDER BY updated_at DESC
    </select>
    <!-- 添加订单信息 -->
    <insert id="savePurchase" parameterType="java.util.List">
        INSERT INTO purchase
        (
        order_id,
        pay_id,
        store_id,
        store_name,
        user_id,
        user_name,
        order_price,
        order_settleme_price,
        order_receiver_name,
        order_receiver_mobile,
        order_address,
        order_create_time,
        order_payment_method,
        order_status,
        updated_at
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.orderId},
            #{item.payId},
            #{item.storeId},
            #{item.storeName},
            #{item.userId},
            #{item.userName},
            #{item.orderPrice},
            #{item.orderSettlemePrice},
            #{item.orderReceiverName},
            #{item.orderReceiverMobile},
            #{item.orderAddress},
            #{item.orderCreateTime},
            #{item.orderPaymentMethod},
            #{item.orderStatus},
            #{item.updatedAt}
            )
        </foreach>
    </insert>
    <!--查询全部订单-->
    <resultMap id="OrderAllList" type="so.sao.shop.supplier.pojo.vo.PurchasesVo">
        <id column="order_id" property="orderId"/>
        <result column="order_receiver_name" property="orderReceiverName"/>
        <result column="order_receiver_mobile" property="orderReceiverMobile"/>
        <result column="order_status" property="orderStatus"/>
        <result column="order_price" property="orderPrice"/>
        <result column="order_create_time" property="orderCreateTime"/>
        <result column="order_payment_time" property="orderPaymentTime"/>
        <result column="order_payment_method" property="orderPaymentMethod"/>
        <result column="order_payment_num" property="orderPaymentNum"/>
        <result column="updated_at" property="updateTime"/>
    </resultMap>
    <sql id="Order_Column_List">
        order_id, order_receiver_name, order_receiver_mobile, order_create_time, order_price, order_status,order_payment_time, order_payment_method, order_payment_num,updated_at
    </sql>
    <select id="findPage" resultMap="OrderAllList" parameterType="so.sao.shop.supplier.pojo.input.PurchaseSelectInput">
        SELECT
        <include refid="Order_Column_List"/>
        FROM purchase
        <where>
            order_status != -1

          <!--  <if test="@so.sao.shop.supplier.util.Ognl@isEmpty(orderStatus)">
                AND (order_status != 7 || pay_status != 0)
            </if>
            <if test="orderStatus == 7">
                AND pay_status != 0
            </if>
            <if test="orderStatus!=null">
                AND order_status = TRIM(#{orderStatus})
            </if>-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderStatus)">
                AND order_status = TRIM(#{orderStatus})
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiverName) and
            @so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiverMobile) and orderReceiverName == orderReceiverMobile">
                AND (order_receiver_name LIKE "${orderReceiverName}%"
                OR order_receiver_mobile LIKE "${orderReceiverMobile}%")
            </if>
            <if test="orderReceiverName != orderReceiverMobile">
                <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiverName)">
                    AND order_receiver_name LIKE "${orderReceiverName}%"
                </if>
                <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiverMobile)">
                    AND order_receiver_mobile LIKE "${orderReceiverMobile}%"
                </if>
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderId)">
                AND order_id LIKE "${orderId}%"
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginDate)">
                AND order_create_time >= TRIM(STR_TO_DATE(#{beginDate},'%Y-%m-%d'))
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(endDate)">
                AND order_create_time &lt; TRIM(DATE_ADD(STR_TO_DATE(#{endDate},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>

            <if test="beginMoney!=null">
                AND order_price >= TRIM(#{beginMoney})
            </if>
            <if test="endMoney != null">
                <![CDATA[AND order_price <= TRIM(#{endMoney})]]>
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderPaymentBeginTime)">
                AND order_payment_time >= TRIM(STR_TO_DATE(#{orderPaymentBeginTime},'%Y-%m-%d'))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderPaymentEndTime)">
                AND order_payment_time &lt; TRIM(DATE_ADD(STR_TO_DATE(#{orderPaymentEndTime},'%Y-%m-%d'),INTERVAL 1
                DAY))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiveBeginTime)">
                AND order_receive_time >= TRIM(STR_TO_DATE(#{orderReceiveBeginTime},'%Y-%m-%d'))
            </if>

            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderReceiveEndTime)">
                AND order_receive_time &lt; TRIM(DATE_ADD(STR_TO_DATE(#{orderReceiveEndTime},'%Y-%m-%d'),INTERVAL 1
                DAY))
            </if>

            <if test="orderPaymentMethod!=null">
                AND order_payment_method = TRIM(#{orderPaymentMethod})
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(orderPaymentNum)">
                AND order_payment_num LIKE "${orderPaymentNum}%"
            </if>


            <if test="userId!=null">
                AND user_id LIKE "${userId}%"
            </if>

            <if test="storeId!=null">
                AND store_id LIKE "${storeId}%"
            </if>
        </where>
        ORDER BY updated_at DESC
    </select>

    <!--更改订单状态-->
    <update id="updateOrder">
        UPDATE purchase
        SET
        order_status = #{orderStatus},
        updated_at = #{updateDate},
        order_receive_time = #{updateDate}
        WHERE order_id = #{orderId}
    </update>

    <!--发货接口-->
    <update id="deliverGoods">
        UPDATE purchase
        SET
        order_status = #{orderStatus},
        updated_at = #{updateDate},
        <if test="receiveMethod == 1">distributor_name = #{name},distributor_mobile = #{number},order_ship_method=1</if>
        <if test="receiveMethod == 2">logistics_company = #{name} ,order_shipment_number =
            #{number},order_ship_method=2
        </if>
        WHERE
        order_id = #{orderId}
    </update>

    <!--删除订单-->
    <update id="deleteByOrderId" parameterType="so.sao.shop.supplier.pojo.vo.PurchasesVo">
        UPDATE purchase
        SET
        order_status = -1,
        updated_at = #{updateDate}
        WHERE order_id IN
        <foreach collection="orderIdArr" open="(" close=")" separator="," item="orderId" index="i">
            #{orderId}
        </foreach>

    </update>

    <resultMap id="accountUserMap" type="so.sao.shop.supplier.domain.Account">
        <id column="account_id" property="accountId"/>
        <result column="provider_name" property="providerName"/>
        <result column="account_status" property="accountStatus"/>
    </resultMap>
    <!-- 根据商品ID查询供应商信息 -->
    <select id="findAccountById" resultMap="accountUserMap">
        SELECT
            account_id,
            provider_name,
            account_status
        FROM
          account
        WHERE
        account_id = (
            SELECT
              supplier_id
            FROM
              supplier_commodity
            WHERE
              id = #{id}
        )
    </select>

    <!--修改订单账户状态为 已结算 -->
    <update id="updateAccountStatus">
        UPDATE record_purchase rp
        LEFT JOIN purchase p ON rp.order_id = p.order_id
        SET p.account_status = '2', p.updated_at = #{updateDate}
        WHERE rp.record_id = #{recordId};
    </update>

    <!--根据商家id统计该账户名下订单状态（已完成）+ 账户状态（未结算）订单结算金额累计之和-->
    <select id="findUncountedMoney" resultType="java.math.BigDecimal" parameterType="java.lang.Long">
        SELECT SUM(order_settleme_price)
        FROM purchase
        WHERE store_id=#{storeId} AND order_status=4 AND account_status &lt; 2;
    </select>

    <!-- 查询订单状态计算已完成订单总金额 -->
    <select id="findOrderStatus" resultType="java.math.BigDecimal" parameterType="java.lang.Long">
        SELECT SUM(ORDER_SETTLEME_PRICE)
        FROM PURCHASE
        <where>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(storeId)">
                STORE_ID = #{storeId}
            </if>
            AND order_status = 4
        </where>
    </select>

    <!-- 分页条件检索账户管理下的订单明细 （高级查询）-->
    <select id="findPageByStoreId" resultMap="BaseResultMap">
        SELECT
        ORDER_ID,ORDER_RECEIVER_NAME,ORDER_RECEIVER_MOBILE,ORDER_STATUS,ORDER_PRICE,ORDER_SETTLEME_PRICE,ORDER_CREATE_TIME,ORDER_PAYMENT_TIME,ORDER_PAYMENT_METHOD,ORDER_PAYMENT_NUM
        FROM PURCHASE
        WHERE STORE_ID = #{storeId,jdbcType=BIGINT}
        AND ORDER_STATUS=4
        <!--按条件检索数据-->
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input)">
            <!--订单产生时间-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.createBeginTime)">
                AND ORDER_CREATE_TIME &gt;= TRIM(STR_TO_DATE(#{input.createBeginTime},'%Y-%m-%d'))
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.createEndTime)">
                AND ORDER_CREATE_TIME &lt; TRIM(DATE_ADD(STR_TO_DATE(#{input.createEndTime},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>
            <!--订单支付时间-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.payBeginTime)">
                AND ORDER_PAYMENT_TIME &gt;= TRIM(STR_TO_DATE(#{input.payBeginTime},'%Y-%m-%d'))
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.payEndTime)">
                AND ORDER_PAYMENT_TIME &lt; TRIM(DATE_ADD(STR_TO_DATE(#{input.payEndTime},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>
            <!--支付方式(1、支付宝；2、微信)-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.orderPaymentMethod)">
                AND ORDER_PAYMENT_METHOD = #{input.orderPaymentMethod}
            </if>
            <!--收货人名称-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.orderReceiverName)">
                AND ORDER_RECEIVER_NAME = TRIM(#{input.orderReceiverName})
            </if>
            <!--收货人联系方式-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.orderReceiverMobile)">
                AND ORDER_RECEIVER_MOBILE = TRIM(#{input.orderReceiverMobile})
            </if>
            <!--订单编号-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.orderId)">
                AND ORDER_ID = TRIM(#{input.orderId})
            </if>
        </if>
        ORDER BY ORDER_PAYMENT_TIME DESC
    </select>

    <!-- 分页条件检索账户管理下的订单明细 （普通查询）-->
    <select id="findPageByStoreIdLow" resultMap="BaseResultMap">
        SELECT
        ORDER_ID,ORDER_RECEIVER_NAME,ORDER_RECEIVER_MOBILE,ORDER_STATUS,ORDER_PRICE,ORDER_SETTLEME_PRICE,ORDER_CREATE_TIME,ORDER_PAYMENT_TIME,ORDER_PAYMENT_METHOD,ORDER_PAYMENT_NUM
        FROM PURCHASE
        WHERE STORE_ID = #{storeId,jdbcType=BIGINT}
        AND ORDER_STATUS = 4
        <!--按条件检索数据-->
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input)">
            <!--订单产生时间-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.createBeginTime)">
                AND ORDER_CREATE_TIME &gt;= TRIM(STR_TO_DATE(#{input.createBeginTime},'%Y-%m-%d'))
            </if>
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.createEndTime)">
                AND ORDER_CREATE_TIME &lt; TRIM(DATE_ADD(STR_TO_DATE(#{input.createEndTime},'%Y-%m-%d'),INTERVAL 1 DAY))
            </if>
            <!--查询条件-->
            <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(input.condition)">
                AND(
                ORDER_ID LIKE concat(TRIM(#{input.condition}),'%')
                OR ORDER_RECEIVER_NAME LIKE concat(TRIM(#{input.condition}),'%')
                OR ORDER_PAYMENT_NUM LIKE concat(TRIM(#{input.condition}),'%')
                )
            </if>
        </if>
        ORDER BY ORDER_PAYMENT_TIME DESC
    </select>

    <!-- 查询订单状态 -->
    <select id="getOrderStatus" resultType="java.lang.Integer" parameterType="java.lang.String">
        SELECT order_status
        FROM purchase
        WHERE order_id= #{orderId}
    </select>

    <!-- 根据订单id查询订单打印页面信息 -->
    <select id="findPrintOrderInfo" resultType="so.sao.shop.supplier.pojo.vo.PurchasePrintVo">
        SELECT
            p.order_id AS orderId,
            p.user_name AS customer,
            p.order_receiver_mobile AS customerPhone,
            p.order_address AS receivingAddress,
            p.order_create_time AS orderCreateTime,
            p.order_price AS totalPrice,
            p.order_status AS orderStatus,
            q.url AS qrcodeUrl,
            q.status AS qrcodeStatus,
            a.provider_name AS providerName
        FROM purchase p
        LEFT JOIN qrcode q ON p.order_id = q.foreign_key
        LEFT JOIN account a ON p.store_id = a.account_id
        WHERE p.order_id = #{orderId}
    </select>

    <!--根据订单编号添加该订单拒收理由相关信息-->
    <update id="insertRefuseMessage" parameterType="java.util.Map">
        UPDATE purchase
        SET
        order_refuse_reason = #{map.refuseReason},
        order_refuse_time = #{map.orderRefuseTime},
        order_refuse_imgA = #{map.refuseImgUrlA},
        order_refuse_imgB = #{map.refuseImgUrlB},
        order_refuse_imgC = #{map.refuseImgUrlC},
        order_status = #{map.orderStatus},
        updated_at = #{map.updatedAt}
        WHERE order_id = #{map.orderId}
    </update>

    <!--根据订单编号查询拒收信息-->
    <resultMap id="OrderRefuseReason" type="so.sao.shop.supplier.pojo.output.OrderRefuseReasonOutput">
        <id column="order_refuse_reason" property="refuseReason"/>
        <result column="order_refuse_imgA" property="refuseImgUrlA"/>
        <result column="order_refuse_imgB" property="refuseImgUrlB"/>
        <result column="order_refuse_imgC" property="refuseImgUrlC"/>
    </resultMap>
    <sql id="Order_Refuse_Reason">
        order_refuse_reason, order_refuse_imgA, order_refuse_imgB, order_refuse_imgC
    </sql>
    <select id="findRefuseReasonByOrderId" parameterType="java.lang.String" resultMap="OrderRefuseReason">
        SELECT
        <include refid="Order_Refuse_Reason"/>
        FROM purchase
        WHERE order_id = #{orderId}
        AND order_status = 5
    </select>

    <!--查询该商户下已完成且按自然月结算订单列表信息-->
    <select id="findPurchaseMonth" resultMap="findPurchaseList">
        SELECT
          order_id,
          order_price,
          order_settleme_price
        FROM
          purchase
        WHERE
          order_status = 4 AND account_status = '0'
        AND order_receive_time >= date_sub(concat(DATE_FORMAT(#{currentDate},'%Y-%m-'),'01'), INTERVAL 1 MONTH)
        AND order_receive_time &lt; concat(DATE_FORMAT(#{currentDate},'%Y-%m-'),'01')
        AND store_id = #{storeId};
    </select>

    <!-- 按自然月或固定天数查询映射结果集 -->
    <resultMap id="findPurchaseList" type="so.sao.shop.supplier.domain.Purchase">
        <id column="order_id" property="orderId"/>
        <result column="order_price" property="orderPrice"/>
        <result column="order_settleme_price" property="orderSettlemePrice"/>
    </resultMap>

    <!--查询该商户下已完成且按固定天数结算订单列表信息-->
    <select id="findPurchaseFixedTime" resultMap="findPurchaseList">
      SELECT
        order_id,
        order_price,
        order_settleme_price
      FROM
        purchase
      WHERE
        order_status = 4 AND account_status = '0'
      AND order_receive_time >= date_sub(DATE_FORMAT(#{lastSettlementDate}, '%Y-%m-%d'), INTERVAL #{remittanced} DAY)
      AND order_receive_time &lt; DATE_FORMAT(#{lastSettlementDate},'%Y-%m-%d')
      AND store_id = #{storeId};
    </select>

    <!--根据订单编号添加该订单取消理由相关信息-->
    <update id="insertCancelMessage" parameterType="java.util.Map">
        UPDATE purchase
        SET
        order_cancel_reason = #{cancelMap.cancelReason},
        order_status = #{cancelMap.orderStatus},
        updated_at = #{cancelMap.updatedAt}
        WHERE order_id = #{cancelMap.orderId}
    </update>

    <!--根据订单编号查询取消原因-->
    <select id="findCancelReason" resultType="java.lang.String" parameterType="java.lang.String">
        SELECT
          order_cancel_reason
        FROM
          purchase
        WHERE order_id = #{orderId}
    </select>

    <!-- 根据支付ID获取该订单 -->
    <select id="findByPayId" resultType="so.sao.shop.supplier.domain.Purchase" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from purchase
        where pay_id = #{payId,jdbcType=VARCHAR}
    </select>

    <!-- 根据订单编号修改订单编号，退款时间 -->
    <update id="refundByOrderId" parameterType="java.util.Map">
        UPDATE purchase
        SET
        order_status = #{refundMap.orderStatus},
        drawback_time = #{refundMap.drawbackTime},
        updated_at = #{refundMap.updatedAt}
        WHERE order_id = #{refundMap.orderId}
    </update>

    <!--根据订单状态查询订单ID-->
    <select id="findOrderIdByOrderStatus" parameterType="java.lang.Integer" resultType="java.lang.String">
        SELECT
        order_id
        FROM purchase
        WHERE order_status = #{orderStatus}
        AND pay_status = 0
        AND TIMESTAMPDIFF(SECOND,order_create_time,NOW()) >= 3600 * 24
    </select>

    <!--批量更新订单的账户状态-->
    <update id="updatePurchasesAccountStatusById" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE purchase
            SET account_status = '1', updated_at = #{item.updatedAt}
            WHERE order_id = #{item.orderId}
        </foreach>
    </update>
</mapper>

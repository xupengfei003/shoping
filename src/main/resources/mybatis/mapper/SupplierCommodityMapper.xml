<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="so.sao.shop.supplier.dao.SupplierCommodityDao">

    <resultMap id="BaseResultMap" type="so.sao.shop.supplier.domain.SupplierCommodity">
        <id column="ID" property="id"/>
        <result column="SKU" property="sku"/>
        <result column="SUPPLIER_ID" property="supplierId"/>
        <result column="CODE" property="code"/>
        <result column="CODE69" property="code69"/>
        <result column="tag_id" property="tagId"/>
        <result column="measure_spec_id" property="measureSpecId"/>
        <result column="RULE_VAL" property="ruleVal"/>
        <result column="INVENTORY" property="inventory"/>
        <result column="unit_id" property="unitId"/>
        <result column="MIN_IMG" property="minImg"/>
        <result column="PRICE" property="price"/>
        <result column="UNIT_PRICE" property="unitPrice"/>
        <result column="CREATED_BY" property="createdBy"/>
        <result column="CREATED_AT" property="createdAt"/>
        <result column="UPDATED_BY" property="updatedBy"/>
        <result column="UPDATED_AT" property="updatedAt"/>
        <result column="DELETED" property="deleted"/>
        <result column="INVALID_STATUS" property="invalidStatus"/>
        <result column="STATUS" property="status"/>
        <result column="REMARK" property="remark"/>
        <result column="DESCRIPTION" property="description"/>
    </resultMap>


    <sql id="searchColumns">
        sc.id AS id,
        sc.min_img AS minImg,
        sc.sku AS sku,
        c.code69 AS code69,
        sc.code AS code,
        cb.name AS brandName,
        c.name AS commName,
        cu.name AS unitName,
        cms.name AS measureSpecName,
        sc.rule_val AS ruleVal,
        sc.inventory AS inventory,
        sc.status AS status,
        sc.invalid_status AS invalidStatus,
        sc.price AS price,
        sc.unit_price AS unitPrice,
        sc.created_at AS createdAt,
        sc.updated_at AS updatedAt
    </sql>
    <insert id="save"  useGeneratedKeys="true" keyProperty="id">
        insert supplier_commodity (
            supplier_id,
            code,
            code69,
            inventory,
            measure_spec_id,
            rule_val,
            unit_id,
            price,
            unit_price,
            min_img,
            created_at,
            updated_at,
            created_by,
            updated_by,
            deleted,
            status,
            description,
            remark,
            tag_id,
            sku
        )VALUES (
            #{supplierId},
            #{code},
            #{code69},
            #{inventory},
            #{measureSpecId},
            #{ruleVal},
            #{unitId},
            #{price},
            #{unitPrice},
            #{minImg},
            #{createdAt},
            #{updatedAt},
            #{createdBy},
            #{updatedBy},
            #{deleted},
            #{status},
            #{description},
            #{remark},
            #{tagId},
            #{sku}
        )
    </insert>

    <!-- 更新商品规格信息 -->
    <update id="update">
        UPDATE supplier_commodity SET
            code = #{code},
            inventory = #{inventory},
            rule_val = #{ruleVal},
            unit_id = #{unitId},
            price = #{price},
            unit_price = #{unitPrice},
            min_img = #{minImg},
            updated_at = #{updatedAt},
            updated_by = #{updatedBy},
            remark = #{remark},
            tag_id = #{tagId},
            measure_spec_id = #{measureSpecId}
        WHERE id = #{id}
    </update>
    <delete id="deleteById">
        UPDATE supplier_commodity SET deleted=#{deleted},updated_at=#{updatedAt} WHERE id=#{id}
    </delete>

    <update id="deleteByIds" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";" >
            UPDATE supplier_commodity
            <set>
                deleted = #{item.deleted},
                updated_at = #{item.updatedAt}
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>

    <select id="searchSuppliersByCode69" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT sc.supplier_Id
        FROM supplier_commodity sc WHERE sc.code69 = #{code69}
    </select>
    <!--获取商品详情-->
    <select id="findSupplierCommodityInfo" resultType="so.sao.shop.supplier.domain.SupplierCommodity">
        SELECT
        id,
        sku,
        remark,
        description,
        code,
        code69,
        rule_val AS ruleVal,
        inventory,
        min_img AS minImg,
        price,
        unit_price AS unitPrice
        FROM supplier_commodity sc
        WHERE sc.deleted = 0 AND code69 = #{code69} AND sc.supplier_id = #{supplierId}
    </select>
    <!--获取商品详情-->
    <select id="findDetail" resultType="so.sao.shop.supplier.pojo.output.CommodityOutput">
        SELECT
        sc.id AS id,
        sc.supplier_id AS supplierId,
        cb.name AS brandName,
        c.category_one_id AS categoryOneId,
        c.category_two_id AS categoryTwoId,
        c.category_three_id AS categoryThreeId,
        c.name AS name,
        sc.remark AS remark,
        sc.description AS description,
        sc.code AS code,
        sc.code69 AS code69,
        c.origin_place AS originPlace,
        c.company_name AS companyName,
        c.market_time AS marketTime,
        sc.tag_id AS tagId,
        ct.name AS tagName,
        sc.measure_spec_id AS measureSpecId,
        cms.name AS measureSpecName,
        sc.rule_val AS ruleVal,
        sc.unit_id AS unitId,
        cu.name AS unitName,
        sc.inventory AS inventory,
        sc.min_img AS minImg,
        sc.price AS price,
        sc.unit_price AS unitPrice,
        sc.created_at AS createdAt,
        sc.updated_at AS updatedAt,
        sc.supplier_id AS supplierId,
        sc.status AS status,
        sc.invalid_status AS invalidStatus,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_one_id) AS categoryOneName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_two_id) AS categoryTwoName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_three_id) AS categoryThreeName
        FROM
        supplier_commodity sc INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sc.code69 = c.code69
        LEFT JOIN comm_measure_spec cms ON sc.measure_spec_id = cms.id LEFT JOIN comm_unit cu ON sc.unit_id = cu.id LEFT JOIN comm_tag ct ON sc.tag_id = ct.id
        WHERE sc.id = #{id}
    </select>

    <!--获取商品信息-->
    <select id="findOne" resultType="so.sao.shop.supplier.domain.SupplierCommodity">
        SELECT
        id,
        sku,
        remark,
        description,
        code,
        code69,
        rule_val AS ruleVal,
        inventory,
        min_img AS minImg,
        price,
        unit_price AS unitPrice,
        created_at AS createdAt,
        updated_at AS updatedAt,
        supplier_id AS supplierId,
        status
        FROM supplier_commodity WHERE id = #{id}
    </select>

    <!--查询商品列表（高级搜索）-->
    <select id="find" resultType="so.sao.shop.supplier.pojo.vo.SuppCommSearchVo">
        SELECT
        <include refid="searchColumns"/>
        FROM
        supplier_commodity sc INNER JOIN (commodity c LEFT JOIN comm_brand cb on c.brand_id = cb.id) on sc.code69 = c.code69
        LEFT JOIN comm_measure_spec cms on sc.measure_spec_id = cms.id LEFT JOIN comm_unit cu on sc.unit_id = cu.id
        WHERE sc.deleted = 0
        AND sc.supplier_id = #{supplierId}
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(commCode69)">
            AND sc.code69 = #{commCode69}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(sku)">
            AND sc.sku = #{sku}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(suppCommCode)">
            AND sc.code = #{suppCommCode}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(commName)">
            AND c.name LIKE CONCAT ('%',#{commName},'%')
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(status)">
            AND sc.status = #{status}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(minPrice) and @so.sao.shop.supplier.util.Ognl@isEmpty(maxPrice)">
            AND sc.price<![CDATA[ >= #{minPrice}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(maxPrice) and @so.sao.shop.supplier.util.Ognl@isEmpty(minPrice)">
            AND  sc.price<![CDATA[<= #{maxPrice}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(minPrice) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(maxPrice)">
            AND sc.price BETWEEN #{minPrice} AND #{maxPrice}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(typeId)">
            AND c.category_one_id = #{typeId}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(endCreateAt)">
            AND Date(sc.created_at)<![CDATA[ >= #{beginCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(beginCreateAt)">
            AND  Date(sc.created_at)<![CDATA[<= #{endCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt)">
            AND Date(sc.created_at) BETWEEN #{beginCreateAt} AND #{endCreateAt}
        </if>
        ORDER BY sc.updated_at DESC , sc.id DESC
    </select>

    <!--根据id查询个数-->
    <select id="countByCode69" resultType="int">
        select
        count(*)
        from supplier_commodity
        WHERE deleted = 0 AND code69 = #{code69} AND supplier_id = #{supplierId}
    </select>

    <!--根据id查询个数-->
    <select id="countById" resultType="int">
        select
        count(*)
        from supplier_commodity where deleted = 0 AND id = #{id}
    </select>

    <!--获取商品状态-->
    <select id="findStatus" resultType="int">
        SELECT
        status
        FROM supplier_commodity WHERE id = #{id}
    </select>

    <!--上下架商品-->
    <update id="onOrOffShelves">
        UPDATE supplier_commodity
        SET updated_at = #{updatedAt},status = #{status}
        WHERE id = #{id}
    </update>

    <!--批量上下架商品-->
    <update id="onOrOffShelvesBatch">
        <foreach collection="list" separator=";" open=" " close=" " item="item">
            UPDATE supplier_commodity
            <set>
                updated_at = #{item.updatedAt},
                status = #{item.status}
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>

    <!--根据商品标签ID查询是否有正在使用（存在性校验使用）-->
    <select id="countSupplierCommodityByTagId" parameterType="java.lang.Long" resultType="int">
        select
        COUNT(id) as num
        from supplier_commodity sc
        WHERE sc.deleted = 0 and sc.tag_id=#{tagId}
    </select>
    <!--查询商品列表（简易查询）-->
    <select id="findSimple" resultType="so.sao.shop.supplier.pojo.vo.SuppCommSearchVo">
        SELECT
        <include refid="searchColumns"/>
        FROM
        supplier_commodity sc INNER JOIN (commodity c LEFT JOIN comm_brand cb on c.brand_id = cb.id) on sc.code69 = c.code69
        LEFT JOIN comm_measure_spec cms on sc.measure_spec_id = cms.id LEFT JOIN comm_unit cu on sc.unit_id = cu.id
        WHERE sc.deleted = 0
        AND sc.supplier_id = #{supplierId}
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(inputvalue)">
            AND (sc.code69 = #{inputvalue} OR c.name LIKE CONCAT ('%',#{inputvalue},'%'))
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(endCreateAt)">
            AND Date(sc.created_at)<![CDATA[ >= #{beginCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(beginCreateAt)">
            AND  Date(sc.created_at)<![CDATA[<= #{endCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt)">
            AND Date(sc.created_at) BETWEEN #{beginCreateAt} AND #{endCreateAt}
        </if>
        ORDER BY sc.updated_at DESC , sc.id DESC
    </select>

    <!--根据unitId查询商品单位是否被supplier_commodity使用-->
    <select id="countByUnitId" resultType="int">
        select
        count(*)
        from supplier_commodity where deleted = 0
        AND unit_id = #{unitId}
    </select>

    <!--计量规格： findAllSupplierCommodityById 通过规格id 查SupplierCommodity  deleted = 0正在使用-->
    <select id="countSupplierCommodityById" parameterType="long"  resultType="int">
        SELECT count(*)
        FROM supplier_commodity
        WHERE deleted = 0 AND measure_spec_id = #{commMeasureSpecId}
    </select>

    <!--根据id数组查询，过滤已删除的商品-->
    <select id="findSupplierCommodityByIds" resultMap="BaseResultMap">
        select
        id,
        updated_at AS updatedAt,
        status
        from supplier_commodity
        where deleted = 0
        AND id IN
        <foreach collection="ids" open="(" close=")" separator="," item="id">
          #{id}
        </foreach>
    </select>

    <!--商品失效-->
    <update id="updateInvalidStatus" parameterType="so.sao.shop.supplier.domain.SupplierCommodity">
        UPDATE supplier_commodity
        SET invalid_status = #{invalidStatus} ,updated_at = #{updatedAt}
        WHERE supplier_id = #{supplierId}
    </update>

    <!--根据商品编号更改商品库存-->
    <update id="updateInventoryByGoodsId" parameterType="java.util.Map">
        <foreach collection="map" item="count" index="goodsId" open="" close="" separator=";">
            update supplier_commodity
            set
                inventory = inventory + #{count}
            where id = #{goodsId}
            and   inventory >= -#{count}
        </foreach>
    </update>
</mapper>
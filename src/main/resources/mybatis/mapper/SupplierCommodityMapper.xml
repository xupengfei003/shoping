<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="so.sao.shop.supplier.dao.SupplierCommodityDao">

    <resultMap id="BaseResultMap" type="so.sao.shop.supplier.domain.SupplierCommodity">
        <id column="ID" property="id"/>
        <result column="SKU" property="sku"/>
        <result column="SUPPLIER_ID" property="supplierId"/>
        <result column="CODE" property="code"/>
        <result column="CODE69" property="code69"/>
        <result column="tag_id" property="tagId"/>
        <result column="measure_spec_id" property="measureSpecId"/>
        <result column="RULE_VAL" property="ruleVal"/>
        <result column="INVENTORY" property="inventory"/>
        <result column="unit_id" property="unitId"/>
        <result column="MIN_IMG" property="minImg"/>
        <result column="PRICE" property="price"/>
        <result column="UNIT_PRICE" property="unitPrice"/>
        <result column="CREATED_BY" property="createdBy"/>
        <result column="CREATED_AT" property="createdAt"/>
        <result column="UPDATED_BY" property="updatedBy"/>
        <result column="UPDATED_AT" property="updatedAt"/>
        <result column="DELETED" property="deleted"/>
        <result column="INVALID_STATUS" property="invalidStatus"/>
        <result column="STATUS" property="status"/>
        <result column="REMARK" property="remark"/>
        <result column="DESCRIPTION" property="description"/>
    </resultMap>


    <sql id="searchColumns">
        sc.id AS id,
        sc.min_img AS minImg,
        sc.sku AS sku,
        c.code69 AS code69,
        sc.code AS code,
        cb.name AS brandName,
        c.name AS commName,
        cu.name AS unitName,
        cms.name AS measureSpecName,
        sc.rule_val AS ruleVal,
        sc.inventory AS inventory,
        sc.status AS status,
        sc.invalid_status AS invalidStatus,
        sc.price AS price,
        sc.unit_price AS unitPrice,
        sc.created_at AS createdAt,
        sc.updated_at AS updatedAt,
        sc.min_order_quantity AS minOrderQuantity,
        sca.audit_result AS auditResult
    </sql>

    <sql id="audit">
          t.id,
          t.sc_id,
          t.supplier_id,
          t.updated_at,
          t.created_at,
          t.status,
          t.audit_result,
          t.audit_flag,
          t.audit_by,
          t.audit_opinion
    </sql>

    <insert id="save"  useGeneratedKeys="true" keyProperty="id">
        insert supplier_commodity (
            supplier_id,
            code,
            code69,
            inventory,
            measure_spec_id,
            rule_val,
            unit_id,
            price,
            unit_price,
            min_img,
            created_at,
            updated_at,
            created_by,
            updated_by,
            deleted,
            status,
            description,
            remark,
            tag_id,
            sku,
            min_order_quantity
        )VALUES (
            #{supplierId},
            #{code},
            #{code69},
            #{inventory},
            #{measureSpecId},
            #{ruleVal},
            #{unitId},
            #{price},
            #{unitPrice},
            #{minImg},
            #{createdAt},
            #{updatedAt},
            #{createdBy},
            #{updatedBy},
            #{deleted},
            #{status},
            #{description},
            #{remark},
            #{tagId},
            #{sku},
            #{minOrderQuantity}
        )
    </insert>

    <!-- 更新商品规格信息 -->
    <update id="update">
        UPDATE supplier_commodity SET
            code = #{code},
            inventory = #{inventory},
            rule_val = #{ruleVal},
            unit_id = #{unitId},
            price = #{price},
            unit_price = #{unitPrice},
            min_img = #{minImg},
            updated_at = #{updatedAt},
            updated_by = #{updatedBy},
            remark = #{remark},
            tag_id = #{tagId},
            measure_spec_id = #{measureSpecId},
            min_order_quantity = #{minOrderQuantity}
        WHERE id = #{id}
    </update>
    <delete id="deleteById">
        UPDATE supplier_commodity SET deleted=#{deleted},updated_at=#{updatedAt} WHERE id=#{id}
    </delete>

    <update id="deleteByIds" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";" >
            UPDATE supplier_commodity
            <set>
                deleted = #{item.deleted},
                updated_at = #{item.updatedAt}
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>

    <select id="searchSuppliersByCode69" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT sc.supplier_Id
        FROM supplier_commodity sc WHERE sc.code69 = #{code69}
    </select>
    <!--获取商品详情-->
    <select id="findSupplierCommodityInfo" resultType="so.sao.shop.supplier.domain.SupplierCommodity">
        SELECT
        id,
        sku,
        remark,
        description,
        code,
        code69,
        rule_val AS ruleVal,
        inventory,
        min_img AS minImg,
        price,
        unit_price AS unitPrice
        FROM supplier_commodity sc
        WHERE sc.deleted = 0 AND code69 = #{code69} AND sc.supplier_id = #{supplierId}
    </select>
    <!--获取商品详情-->
    <select id="findDetail" resultType="so.sao.shop.supplier.pojo.output.CommodityOutput">
        SELECT
        sc.id AS id,
        sc.supplier_id AS supplierId,
        cb.name AS brandName,
        c.category_one_id AS categoryOneId,
        c.category_two_id AS categoryTwoId,
        c.category_three_id AS categoryThreeId,
        c.name AS name,
        sc.remark AS remark,
        sc.description AS description,
        sc.code AS code,
        sc.code69 AS code69,
        c.origin_place AS originPlace,
        c.company_name AS companyName,
        c.market_time AS marketTime,
        sc.tag_id AS tagId,
        ct.name AS tagName,
        sc.measure_spec_id AS measureSpecId,
        cms.name AS measureSpecName,
        sc.rule_val AS ruleVal,
        sc.unit_id AS unitId,
        cu.name AS unitName,
        sc.inventory AS inventory,
        sc.min_img AS minImg,
        sc.price AS price,
        sc.unit_price AS unitPrice,
        sc.created_at AS createdAt,
        sc.updated_at AS updatedAt,
        sc.supplier_id AS supplierId,
        sc.status AS status,
        sc.invalid_status AS invalidStatus,
        sc.min_order_quantity AS minOrderQuantity,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_one_id) AS categoryOneName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_two_id) AS categoryTwoName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_three_id) AS categoryThreeName
        FROM
              supplier_commodity sc
        INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sc.code69 = c.code69
         LEFT JOIN comm_measure_spec cms ON sc.measure_spec_id = cms.id
         LEFT JOIN comm_unit cu ON sc.unit_id = cu.id
         LEFT JOIN comm_tag ct ON sc.tag_id = ct.id
         WHERE sc.id = #{id}
    </select>

    <!--查询编辑后的商品详情-->
    <select id="findDetailTmp" resultType="so.sao.shop.supplier.pojo.output.CommodityOutput">
        SELECT
        sctmp.id AS id,
        sca.id AS scaId,
        sctmp.supplier_id AS supplierId,
        cb.name AS brandName,
        c.category_one_id AS categoryOneId,
        c.category_two_id AS categoryTwoId,
        c.category_three_id AS categoryThreeId,
        c.name AS name,
        sctmp.remark AS remark,
        sctmp.code AS code,
        sctmp.code69 AS code69,
        c.origin_place AS originPlace,
        c.company_name AS companyName,
        c.market_time AS marketTime,
        sctmp.tag_id AS tagId,
        ct.name AS tagName,
        sctmp.measure_spec_id AS measureSpecId,
        cms.name AS measureSpecName,
        sctmp.rule_val AS ruleVal,
        sctmp.unit_id AS unitId,
        cu.name AS unitName,
        sctmp.inventory AS inventory,
        sctmp.min_img AS minImg,
        sctmp.price AS price,
        sctmp.unit_price AS unitPrice,
        sctmp.created_at AS createdAt,
        sctmp.updated_at AS updatedAt,
        sctmp.supplier_id AS supplierId,
        sctmp.status AS status,
        sctmp.invalid_status AS invalidStatus,
        sctmp.min_order_quantity AS minOrderQuantity,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_one_id) AS categoryOneName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_two_id) AS categoryTwoName,
        (SELECT NAME FROM comm_category cc WHERE cc.id = c.category_three_id) AS categoryThreeName
        FROM
              supplier_commodity_tmp sctmp
        INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sctmp.code69 = c.code69
         LEFT JOIN comm_measure_spec cms ON sctmp.measure_spec_id = cms.id
         LEFT JOIN comm_unit cu ON sctmp.unit_id = cu.id
         LEFT JOIN comm_tag ct ON sctmp.tag_id = ct.id
         LEFT JOIN supplier_commodity_audit sca ON sctmp.sca_id = sca.id
             WHERE sca.sc_id = #{id}
    </select>

    <!--获取商品信息-->
    <select id="findOne" resultType="so.sao.shop.supplier.domain.SupplierCommodity">
        SELECT
        id,
        sku,
        remark,
        description,
        code,
        code69,
        rule_val AS ruleVal,
        inventory,
        min_img AS minImg,
        price,
        unit_price AS unitPrice,
        created_at AS createdAt,
        updated_at AS updatedAt,
        supplier_id AS supplierId,
        status,
        sku
        FROM supplier_commodity WHERE id = #{id} and deleted = 0
    </select>

    <!--查询商品列表（高级搜索）-->
    <select id="find" resultType="so.sao.shop.supplier.pojo.vo.SuppCommSearchVo">
            SELECT
                t1.sc_id AS id,
                sctmp.supplier_id,
                sctmp.min_img,
                sctmp.code69,
                sctmp.code,
                cb.name AS brandName,
                c.name AS commName,
                c.category_one_id AS categoryOneId,
                cu.name AS unitName,
                cms.name AS measureSpecName,
                sctmp.rule_val,
                sctmp.inventory,
                t1.status AS status,
                sctmp.invalid_status,
                sctmp.price,
                sctmp.unit_price,
                t1.updated_at,
                sctmp.created_at,
                sctmp.min_order_quantity,
                t1.audit_result,
                t1.audit_opinion
            FROM
                supplier_commodity_tmp sctmp
            INNER JOIN (
            SELECT
                  <include refid="audit"/>
            FROM supplier_commodity_audit t WHERE t.status = 6 AND t.audit_flag = 1) t1 ON sctmp.sca_id = t1.id
            INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sctmp.code69 = c.code69
            LEFT JOIN comm_measure_spec cms ON sctmp.measure_spec_id = cms.id
            LEFT JOIN comm_unit cu ON sctmp.unit_id = cu.id
        UNION
            SELECT
                sc.id,
                sc.supplier_id,
                sc.min_img,
                c.code69,
                sc.code,
                cb.name AS brandName,
                c.name AS commName,
                c.category_one_id AS categoryOneId,
                cu.name AS unitName,
                cms.name AS measureSpecName,
                sc.rule_val,
                sc.inventory,
                sc.status,
                sc.invalid_status,
                sc.price,
                sc.unit_price,
                sc.created_at,
                sc.updated_at,
                sc.min_order_quantity,
                t1.audit_result,
                t1.audit_opinion
            FROM
                supplier_commodity sc
            LEFT JOIN (
            SELECT
                  <include refid="audit"/>
            FROM
                  supplier_commodity_audit t
            WHERE t.audit_flag = 1 AND t.status != 6) t1 ON sc.id = t1.sc_id
            INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sc.code69 = c.code69
            LEFT JOIN comm_measure_spec cms ON sc.measure_spec_id = cms.id
            LEFT JOIN comm_unit cu ON sc.unit_id = cu.id
            WHERE sc.deleted = 0
            ) t
        GROUP BY id HAVING t.supplier_id = #{supplierId}

        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(commCode69)">
            AND t.code69 = #{commCode69}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(sku)">
            AND t.sku = #{sku}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(suppCommCode)">
            AND t.code = #{suppCommCode}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(commName)">
            AND commName LIKE CONCAT ('%',#{commName},'%')
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(status)">
            AND t.status = #{status}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(minPrice) and @so.sao.shop.supplier.util.Ognl@isEmpty(maxPrice)">
            AND t.price<![CDATA[ >= #{minPrice}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(maxPrice) and @so.sao.shop.supplier.util.Ognl@isEmpty(minPrice)">
            AND  t.price<![CDATA[<= #{maxPrice}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(minPrice) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(maxPrice)">
            AND t.price BETWEEN #{minPrice} AND #{maxPrice}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(typeId)">
            AND c.category_one_id = #{typeId}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(auditResult)">
            AND t.audit_result = #{auditResult}
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(endCreateAt)">
            AND Date(t.created_at)<![CDATA[ >= #{beginCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(beginCreateAt)">
            AND  Date(t.created_at)<![CDATA[<= #{endCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt)">
            AND Date(t.created_at) BETWEEN #{beginCreateAt} AND #{endCreateAt}
        </if>
        ORDER BY t.updated_at DESC , t.id DESC
    </select>

    <!--根据id查询个数-->
    <select id="countByCode69" resultType="int">
        select
        count(*)
        from supplier_commodity
        WHERE deleted = 0 AND code69 = #{code69} AND supplier_id = #{supplierId}
    </select>

    <!--根据id查询个数-->
    <select id="countById" resultType="int">
        select
        count(*)
        from supplier_commodity where deleted = 0 AND id = #{id}
    </select>

    <!--获取商品状态-->
    <select id="findStatus" resultType="int">
        SELECT
        status
        FROM supplier_commodity WHERE id = #{id}
    </select>

    <!--上下架商品（仅限待上架商品的下架与管理员上下架操作）-->
    <update id="onOrOffShelves">
        UPDATE supplier_commodity
        SET updated_at = #{updatedAt},status = #{status}
        WHERE id = #{id}
    </update>

    <!--批量上下架商品（仅限待上架商品的批量下架与管理员批量上下架操作操作）-->
    <update id="onOrOffShelvesBatch">
        <foreach collection="list" separator=";" open=" " close=" " item="item">
            UPDATE supplier_commodity
            <set>
                updated_at = #{item.updatedAt},
                status = #{item.status}
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>

    <!--根据商品标签ID查询是否有正在使用（存在性校验使用）-->
    <select id="countSupplierCommodityByTagId" parameterType="java.lang.Long" resultType="int">
        select
        COUNT(id) as num
        from supplier_commodity sc
        WHERE sc.deleted = 0 and sc.tag_id=#{tagId}
    </select>
    <!--查询商品列表（简易查询）-->
    <select id="findSimple" resultType="so.sao.shop.supplier.pojo.vo.SuppCommSearchVo">
        SELECT
            id AS id,
            min_img AS minImg,
            supplier_id,
            code69 AS code69,
            CODE AS CODE,
            brandName,
            commName,
            unitName,
            measureSpecName,
            rule_val AS ruleVal,
            inventory AS inventory,
            status AS statusNum,
            invalid_status AS invalidStatus,
            price AS price,
            unit_price AS unitPrice,
            created_at AS createdAt,
            updated_at AS updatedAt,
            min_order_quantity AS minOrderQuantity,
            audit_result AS auditResult,
            audit_opinion AS auditOpinion
        FROM (
                SELECT
                    t1.sc_id AS id,
                    sctmp.supplier_id,
                    sctmp.min_img,
                    sctmp.code69,
                    sctmp.code,
                    cb.name AS brandName,
                    c.name AS commName,
                    c.category_one_id AS categoryOneId,
                    cu.name AS unitName,
                    cms.name AS measureSpecName,
                    sctmp.rule_val,
                    sctmp.inventory,
                    t1.status AS status,
                    sctmp.invalid_status,
                    sctmp.price,
                    sctmp.unit_price,
                    t1.updated_at,
                    sctmp.created_at,
                    sctmp.min_order_quantity,
                    t1.audit_result,
                    t1.audit_opinion
                FROM
                    supplier_commodity_tmp sctmp
                INNER JOIN (
                SELECT
                     <include refid="audit"/>
                FROM supplier_commodity_audit t WHERE t.status = 6 AND t.audit_flag = 1) t1 ON sctmp.sca_id = t1.id
                INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sctmp.code69 = c.code69
                LEFT JOIN comm_measure_spec cms ON sctmp.measure_spec_id = cms.id
                LEFT JOIN comm_unit cu ON sctmp.unit_id = cu.id
           UNION
                SELECT
                    sc.id,
                    sc.supplier_id,
                    sc.min_img,
                    c.code69,
                    sc.code,
                    cb.name AS brandName,
                    c.name AS commName,
                    c.category_one_id AS categoryOneId,
                    cu.name AS unitName,
                    cms.name AS measureSpecName,
                    sc.rule_val,
                    sc.inventory,
                    sc.status,
                    sc.invalid_status,
                    sc.price,
                    sc.unit_price,
                    sc.created_at,
                    sc.updated_at,
                    sc.min_order_quantity,
                    t1.audit_result,
                    t1.audit_opinion
                FROM
                     supplier_commodity sc
                LEFT JOIN (
                SELECT
                    <include refid="audit"/>
                FROM
                    supplier_commodity_audit t
                    WHERE t.audit_flag = 1 AND t.status != 6) t1 ON sc.id = t1.sc_id
                INNER JOIN (commodity c LEFT JOIN comm_brand cb ON c.brand_id = cb.id) ON sc.code69 = c.code69
                LEFT JOIN comm_measure_spec cms ON sc.measure_spec_id = cms.id
                LEFT JOIN comm_unit cu ON sc.unit_id = cu.id
                WHERE sc.deleted = 0
                ) t
          GROUP BY id HAVING t.supplier_id = #{supplierId}
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(inputvalue)">
            AND (t.code69 = #{inputvalue} OR commName LIKE CONCAT ('%',#{inputvalue},'%'))
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(endCreateAt)">
            AND Date(t.created_at)<![CDATA[ >= #{beginCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt) and @so.sao.shop.supplier.util.Ognl@isEmpty(beginCreateAt)">
            AND  Date(t.created_at)<![CDATA[<= #{endCreateAt}]]>
        </if>
        <if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(beginCreateAt) and @so.sao.shop.supplier.util.Ognl@isNotEmpty(endCreateAt)">
            AND Date(t.created_at) BETWEEN #{beginCreateAt} AND #{endCreateAt}
        </if>
        ORDER BY t.updated_at DESC , t.id DESC
    </select>

    <!--根据unitId查询商品单位是否被supplier_commodity使用-->
    <select id="countByUnitId" resultType="int">
        select
        count(*)
        from supplier_commodity where deleted = 0
        AND unit_id = #{unitId}
    </select>

    <!--计量规格： findAllSupplierCommodityById 通过规格id 查SupplierCommodity  deleted = 0正在使用-->
    <select id="countSupplierCommodityById" parameterType="long"  resultType="int">
        SELECT count(*)
        FROM supplier_commodity
        WHERE deleted = 0 AND measure_spec_id = #{commMeasureSpecId}
    </select>

    <!--根据id数组查询，过滤已删除的商品-->
    <select id="findSupplierCommodityByIds" resultMap="BaseResultMap">
        select
        id,
        supplier_id,
        updated_at,
        status
        from supplier_commodity
        where deleted = 0
        AND id IN
        <foreach collection="ids" open="(" close=")" separator="," item="id">
          #{id}
        </foreach>
    </select>

    <!--商品失效-->
    <update id="updateInvalidStatus" parameterType="so.sao.shop.supplier.domain.SupplierCommodity">
        UPDATE supplier_commodity
        SET invalid_status = #{invalidStatus} ,updated_at = #{updatedAt}
        WHERE supplier_id = #{supplierId}
    </update>

    <!--根据商品编号更改商品库存-->
    <update id="updateInventoryByGoodsId" parameterType="java.util.Map">
        <foreach collection="map" item="count" index="goodsId" open="" close="" separator=";">
            update supplier_commodity
            set
                inventory = inventory + #{count}
            where id = #{goodsId}
            and   inventory >= -#{count}
        </foreach>
    </update>

    <!--获取商品信息-->
    <select id="findBySupplierId" resultType="so.sao.shop.supplier.domain.SupplierCommodity">
        SELECT
        id,
        sku,
        remark,
        description,
        code,
        code69,
        rule_val AS ruleVal,
        inventory,
        min_img AS minImg,
        price,
        unit_price AS unitPrice,
        created_at AS createdAt,
        updated_at AS updatedAt,
        supplier_id AS supplierId,
        status
        FROM supplier_commodity WHERE supplier_id = #{supplierId}
    </select>

    <!--根据商品ID查询购物车所需字段-->
    <select id="findOneToCartItem" resultMap="BaseResultMap">
        SELECT
        id,
        supplier_id,
        price,
        min_img,
        measure_spec_id,
        rule_val,
        unit_id,
        sku,
        status,
        invalid_status,
        code69,
        inventory
        FROM supplier_commodity
        WHERE id = #{id}
    </select>

    <!--商品失效-->
    <update id="updateInvalidStatusById" parameterType="so.sao.shop.supplier.domain.SupplierCommodity">
        UPDATE supplier_commodity
        SET invalid_status = #{invalidStatus} ,updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 更新商品规格信息 -->
    <update id="updateAmz">
        UPDATE supplier_commodity SET
        sku = #{sku},
        supplier_id = #{supplierId},
        code69 = #{code69},
        price = #{price},
        unit_price = #{unitPrice},
        min_img = #{minImg},
        updated_at = #{updatedAt},
        updated_by = #{updatedBy},
        remark = #{remark},
        status = #{status},
        invalid_status = #{invalidStatus}
        WHERE id = #{id}
    </update>

    <!-- 更新供应商 商品表中min_img信息 -->
    <update id="updateMinImg">
        UPDATE supplier_commodity
        SET
        min_img = #{minImg},
        updated_at = #{updatedAt},
        updated_by = #{updatedBy}
        WHERE id = #{scId}
    </update>

	<!-- 轮播图查询商品信息 -->
    <select id="findCommByNameAndCategory" resultType="so.sao.shop.supplier.pojo.output.CommodityBannerOut">
    	SELECT 
		  sc.id AS commodityId,
		  a.provider_name AS providerName,
		  sc.min_img AS minImg,
		  sc.code69 AS code69,
		  sc.code AS commodityCode,
		  com.name AS brandName,
		  c.name AS commodityName,
		  cms.name AS specName,
		  sc.rule_val AS ruleVal,
		  cu.name AS unitName,
		  sc.inventory AS inventory,
		  sc.status AS status
		FROM
		  supplier_commodity sc 
		  LEFT JOIN commodity c 
		    ON sc.code69 = c.code69 
		  LEFT JOIN comm_measure_spec cms 
		    ON sc.measure_spec_id = cms.id 
		  LEFT JOIN comm_unit cu 
		    ON sc.unit_id = cu.id
		  LEFT JOIN account a
		    ON sc.supplier_id = a.account_id
		  LEFT JOIN comm_brand com
		    ON c.brand_id = com.id
		WHERE sc.deleted = 0
		AND sc.status = 2
		<if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(commodityName)">
			AND c.name like CONCAT ('%',#{commodityName},'%')
		</if>
		<if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(categoryOneId)">
			AND c.category_one_id = #{categoryOneId}
		</if>
		<if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(categoryTwoId)">
			AND c.category_two_id = #{categoryTwoId}
		</if>
		<if test="@so.sao.shop.supplier.util.Ognl@isNotEmpty(categoryThreeId)">
			AND c.category_three_id = #{categoryThreeId}
		</if>
		ORDER BY sc.updated_at DESC
    </select>

    <!--商品状态修改-->
    <update id="updateSupplierCommodityStatusById" >
        UPDATE supplier_commodity
        SET status = #{status} ,updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>
    <!--根据商品id查询很出当前商品的状态-->

    <select id="findSupplierCommStatus" resultType="int">
        SELECT  count(*) FROM supplier_commodity_audit sca
        LEFT JOIN supplier_commodity_tmp sctmp   ON sctmp.sca_id = sca.id
        WHERE sca.status = 6
        AND sca.audit_flag = 1 AND sca.sc_id = #{id}
    </select>
</mapper>